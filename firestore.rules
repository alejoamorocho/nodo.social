rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones de validación comunes
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Validaciones de nodos
    match /nodes/{nodeId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && request.resource.data.title.size() >= 3 
        && request.resource.data.title.size() <= 100
        && request.resource.data.description.size() >= 10
        && request.resource.data.description.size() <= 1000
        && request.resource.data.creatorId == request.auth.uid;
      allow update: if isAuthenticated() 
        && (isOwner(resource.data.creatorId) || isAdmin());
      allow delete: if isAuthenticated() 
        && (isOwner(resource.data.creatorId) || isAdmin());
    }

    // Validaciones de usuarios
    match /users/{userId} {
      allow read: if true;
      allow create, update: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.email.matches('^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
      allow delete: if isAdmin();
      
      // Subcollección de seguidores
      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(followerId);
      }
    }
    
    // Validaciones de productos
    match /products/{productId} {
      allow read: if true;
      allow create: if isAuthenticated()
        && request.resource.data.price >= 0
        && request.resource.data.name.size() >= 3
        && request.resource.data.description.size() >= 10;
      allow update: if isAuthenticated() 
        && (isOwner(resource.data.creatorId) || isAdmin());
      allow delete: if isAuthenticated() 
        && (isOwner(resource.data.creatorId) || isAdmin());
    }
    
    // Reglas para tiendas
    match /stores/{storeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
                   && hasValidFields(['name', 'ownerId'])
                   && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() 
                           && resource.data.ownerId == request.auth.uid;
    }
    
    // Reglas para notificaciones
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() 
                  && resource.data.userId == request.auth.uid;
      allow write: if false; // Solo escritura a través de Cloud Functions
    }
  }
}
